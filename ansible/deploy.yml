---
- name: Build and Deploy AI Job Wars
  hosts: localhost
  gather_facts: no
  vars:
    project_root: "{{ playbook_dir | dirname }}"
    html_dir: "{{ project_root }}/html"
    static_dir: "{{ html_dir }}/static"
    publish_dir: "{{ project_root }}/publish"
    bundle_output: "{{ static_dir }}/js/bundle.js"
    bundle_min_output: "{{ static_dir }}/js/bundle.min.js"
    remote_host: "10.90.0.45"
    deploy_user: "root"
    remote_path: "/web/aijobwars.com/html/"

    # JavaScript files in dependency order
    js_files:
      # Core classes
      - "{{ static_dir }}/js/core/events.js"
      - "{{ static_dir }}/js/core/containers.js"
      - "{{ static_dir }}/js/core/asset_loader.js"
      - "{{ static_dir }}/js/core/viewport.js"
      - "{{ static_dir }}/js/core/kb.js"

      # Rendering
      - "{{ static_dir }}/js/rendering/audio.js"
      - "{{ static_dir }}/js/rendering/sprites.js"
      - "{{ static_dir }}/js/rendering/font.js"

      # UI Components
      - "{{ static_dir }}/js/ui/components/ui_component.js"
      - "{{ static_dir }}/js/ui/components/button.js"
      - "{{ static_dir }}/js/ui/components/seekbar.js"
      - "{{ static_dir }}/js/ui/components/scrollbar.js"
      - "{{ static_dir }}/js/ui/components/percentage_bar.js"

      # UI Modals
      - "{{ static_dir }}/js/ui/modals/modal.js"

      # Core Graphics (depends on viewport, sprites, font, button, modal)
      - "{{ static_dir }}/js/core/graphics.js"
      - "{{ static_dir }}/js/core/window_manager.js"

      # Objects
      - "{{ static_dir }}/js/objects/motion.js"
      - "{{ static_dir }}/js/objects/object.js"
      - "{{ static_dir }}/js/objects/explosion.js"
      - "{{ static_dir }}/js/objects/debris.js"
      - "{{ static_dir }}/js/objects/projectile.js"
      - "{{ static_dir }}/js/objects/missiles.js"
      - "{{ static_dir }}/js/objects/ship.js"
      - "{{ static_dir }}/js/objects/boss.js"
      - "{{ static_dir }}/js/objects/enemy.js"
      - "{{ static_dir }}/js/objects/mine.js"
      - "{{ static_dir }}/js/objects/powerup.js"

      # Logic
      - "{{ static_dir }}/js/logic/fire_control.js"
      - "{{ static_dir }}/js/logic/level.js"
      - "{{ static_dir }}/js/logic/ui.js"

      # Cinematic
      - "{{ static_dir }}/js/cinematic/scene.js"

      # UI Modals (rest)
      - "{{ static_dir }}/js/ui/modals/help.js"
      - "{{ static_dir }}/js/ui/modals/cinematic_player.js"
      - "{{ static_dir }}/js/ui/modals/prologue.js"
      - "{{ static_dir }}/js/ui/modals/high_scores.js"
      - "{{ static_dir }}/js/ui/modals/credits.js"

      # UI Screens
      - "{{ static_dir }}/js/ui/screens/menu.js"
      - "{{ static_dir }}/js/ui/screens/pause.js"
      - "{{ static_dir }}/js/ui/screens/game.js"
      - "{{ static_dir }}/js/ui/screens/boss_mode.js"
      - "{{ static_dir }}/js/ui/screens/intro.js"

  tasks:
    - name: Bundle JavaScript files
      tags: ['bundle', 'build']
      block:
        - name: Remove old bundle files
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - "{{ bundle_output }}"
            - "{{ bundle_min_output }}"

        - name: Concatenate JavaScript files
          shell: "cat {{ js_files | join(' ') }} > {{ bundle_output }}"
          args:
            chdir: "{{ project_root }}"

        - name: Check if uglifyjs is installed
          command: which uglifyjs
          register: uglifyjs_check
          failed_when: false
          changed_when: false

        - name: Install uglifyjs if missing
          command: npm install -g uglify-js
          when: uglifyjs_check.rc != 0
          become: yes

        - name: Minify bundle with uglifyjs
          command: "uglifyjs {{ bundle_output }} -o {{ bundle_min_output }}"

        - name: Show bundle stats
          stat:
            path: "{{ item }}"
          loop:
            - "{{ bundle_output }}"
            - "{{ bundle_min_output }}"
          register: bundle_stats

        - name: Display bundle sizes
          debug:
            msg: |
              Bundle created successfully:
              - {{ bundle_output }}: {{ (bundle_stats.results[0].stat.size / 1024) | round(2) }} KB
              - {{ bundle_min_output }}: {{ (bundle_stats.results[1].stat.size / 1024) | round(2) }} KB
              - Compression: {{ ((1 - bundle_stats.results[1].stat.size / bundle_stats.results[0].stat.size) * 100) | round(2) }}%

    - name: Prepare publish directory
      tags: ['publish', 'build']
      block:
        - name: Clean publish directory
          file:
            path: "{{ publish_dir }}"
            state: absent

        - name: Create publish directory structure
          file:
            path: "{{ item }}"
            state: directory
          loop:
            - "{{ publish_dir }}"
            - "{{ publish_dir }}/static"

        - name: Copy static assets to publish
          synchronize:
            src: "{{ static_dir }}/"
            dest: "{{ publish_dir }}/static/"
            rsync_opts:
              - "--exclude=js/"
              - "--include=css/"
              - "--include=asset_packages/"
          delegate_to: localhost

        - name: Create js directory in publish
          file:
            path: "{{ publish_dir }}/static/js"
            state: directory

        - name: Copy bundle.min.js to publish
          copy:
            src: "{{ bundle_min_output }}"
            dest: "{{ publish_dir }}/static/js/bundle.min.js"

        - name: Copy favicon to publish
          copy:
            src: "{{ html_dir }}/favicon.png"
            dest: "{{ publish_dir }}/favicon.png"
          failed_when: false

        - name: Copy production index.html to publish
          copy:
            src: "{{ html_dir }}/index.prod.html"
            dest: "{{ publish_dir }}/index.html"

        - name: Show publish directory size
          shell: "du -sh {{ publish_dir }}"
          register: publish_size
          changed_when: false

        - name: Display publish info
          debug:
            msg: |
              Publish directory created successfully:
              - Location: {{ publish_dir }}
              - Size: {{ publish_size.stdout }}
              - Ready for deployment

    - name: Deploy to remote server
      tags: ['deploy', 'never']
      block:
        - name: Verify publish directory exists
          stat:
            path: "{{ publish_dir }}/index.html"
          register: publish_check
          failed_when: not publish_check.stat.exists

        - name: Sync publish directory to remote server
          command: >
            rsync -avz --delete
            {{ publish_dir }}/
            {{ deploy_user }}@{{ remote_host }}:{{ remote_path }}
          register: rsync_result

        - name: Display rsync output
          debug:
            var: rsync_result.stdout_lines

        - name: Verify deployment
          debug:
            msg: "Deployment to {{ deploy_user }}@{{ remote_host }}:{{ remote_path }} completed successfully"

  handlers:
    - name: Cleanup temporary files
      file:
        path: "{{ bundle_output }}"
        state: absent
